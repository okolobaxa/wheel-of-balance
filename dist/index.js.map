{"version":3,"sources":["../src/FileSaver.js","text-to-arc.js","index.js"],"names":["FILL","renderType","circleText","ctx","text","x","y","radius","start","end","forward","i","textWidth","pA","pAS","a","aw","wScale","aligned","dir","trim","globalAlpha","isNaN","TypeError","textAlign","measureText","width","Math","PI","length","xDx","cos","xDy","sin","setTransform","fillText","strokeText","CanvasRenderingContext2D","prototype","fillCircleText","strokeCircleText","measureCircleText","measure","angularWidth","pixelAngularSize","require","Wheel","canvas","config","levels","fontSize","segments","color","level","getContext","style","font","textBaseline","drawSegments","center","radiansPerSegment","step","drawCircles","drawTexts","toBlob","blob","data","map","s","redraw","HTMLCanvasElement","defaultConfig","height","maxRadius","min","degreesPerSegment","onmousedown","event","setLevel","clean","draw","context","beginPath","clearRect","fillStyle","fillRect","closePath","startAngle","endAngle","segment","dataItem","drawSegment","centerAngel","textAngularWidth","moveTo","fill","arc","segmentsCount","radians","endX","endY","lineTo","strokeStyle","lineWidth","stroke","currentR","e","calculateLineEnd","dx","dy","degrees","calculateLineAngel","segmentId","floor","pointRadius","sqrt","rect","getBoundingClientRect","clientX","left","clientY","top","atan","window"],"mappings":"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","file":"index.js","sourceRoot":"../js","sourcesContent":["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","(function () {\n    const FILL = 0;        // const to indicate filltext render\n    const STROKE = 1;\n    var renderType = FILL; // used internal to set fill or stroke text\n    const multiplyCurrentTransform = false; // if true Use current transform when rendering\n    // if false use absolute coordinates which is a little quicker\n    // after render the currentTransform is restored to default transform\n\n\n\n    // measure circle text\n    // ctx: canvas context\n    // text: string of text to measure\n    // r: radius in pixels\n    //\n    // returns the size metrics of the text\n    //\n    // width: Pixel width of text\n    // angularWidth : angular width of text in radians\n    // pixelAngularSize : angular width of a pixel in radians\n    var measure = function (ctx, text, radius) {\n        var textWidth = ctx.measureText(text).width; // get the width of all the text\n        return {\n            width: textWidth,\n            angularWidth: (1 / radius) * textWidth,\n            pixelAngularSize: 1 / radius\n        };\n    }\n\n    // displays text along a circle\n    // ctx: canvas context\n    // text: string of text to measure\n    // x,y: position of circle center\n    // r: radius of circle in pixels\n    // start: angle in radians to start. \n    // [end]: optional. If included text align is ignored and the text is \n    //        scaled to fit between start and end;\n    // [forward]: optional default true. if true text direction is forwards, if false  direction is backward\n    var circleText = function (ctx, text, x, y, radius, start, end, forward) {\n        var i, textWidth, pA, pAS, a, aw, wScale, aligned, dir, fontSize;\n        if (text.trim() === \"\" || ctx.globalAlpha === 0) { // dont render empty string or transparent\n            return;\n        }\n        if (isNaN(x) || isNaN(y) || isNaN(radius) || isNaN(start) || (end !== undefined && end !== null && isNaN(end))) { // \n            throw TypeError(\"circle text arguments requires a number for x,y, radius, start, and end.\")\n        }\n        aligned = ctx.textAlign;        // save the current textAlign so that it can be restored at end\n        dir = forward ? 1 : forward === false ? -1 : 1;  // set dir if not true or false set forward as true  \n        pAS = 1 / radius;               // get the angular size of a pixel in radians\n        textWidth = ctx.measureText(text).width; // get the width of all the text\n        if (end !== undefined && end !== null) { // if end is supplied then fit text between start and end\n            pA = ((end - start) / textWidth) * dir;\n            wScale = (pA / pAS) * dir;\n        } else {                 // if no end is supplied correct start and end for alignment\n            // if forward is not given then swap top of circle text to read the correct direction\n            if (forward === null || forward === undefined) {\n                if (((start % (Math.PI * 2)) + Math.PI * 2) % (Math.PI * 2) > Math.PI) {\n                    dir = -1;\n                }\n            }\n            pA = -pAS * dir;\n            wScale = -1 * dir;\n            switch (aligned) {\n                case \"center\":       // if centered move around half width\n                    start -= (pA * textWidth) / 2;\n                    end = start + pA * textWidth;\n                    break;\n                case \"right\":// intentionally falls through to case \"end\"\n                case \"end\":\n                    end = start;\n                    start -= pA * textWidth;\n                    break;\n                case \"left\":  // intentionally falls through to case \"start\"\n                case \"start\":\n                    end = start + pA * textWidth;\n            }\n        }\n\n        ctx.textAlign = \"center\";                     // align for rendering\n        a = start;                                    // set the start angle\n        for (var i = 0; i < text.length; i += 1) {    // for each character\n            aw = ctx.measureText(text[i]).width * pA; // get the angular width of the text\n            var xDx = Math.cos(a + aw / 2);           // get the yAxies vector from the center x,y out\n            var xDy = Math.sin(a + aw / 2);\n            if (multiplyCurrentTransform) { // transform multiplying current transform\n                ctx.save();\n                if (xDy < 0) { // is the text upside down. If it is flip it\n                    ctx.transform(-xDy * wScale, xDx * wScale, -xDx, -xDy, xDx * radius + x, xDy * radius + y);\n                } else {\n                    ctx.transform(-xDy * wScale, xDx * wScale, xDx, xDy, xDx * radius + x, xDy * radius + y);\n                }\n            } else {\n                if (xDy < 0) { // is the text upside down. If it is flip it\n                    ctx.setTransform(-xDy * wScale, xDx * wScale, -xDx, -xDy, xDx * radius + x, xDy * radius + y);\n                } else {\n                    ctx.setTransform(-xDy * wScale, xDx * wScale, xDx, xDy, xDx * radius + x, xDy * radius + y);\n                }\n            }\n            if (renderType === FILL) {\n                ctx.fillText(text[i], 0, 0);    // render the character\n            } else {\n                ctx.strokeText(text[i], 0, 0);  // render the character\n            }\n            if (multiplyCurrentTransform) {  // restore current transform\n                ctx.restore();\n            }\n            a += aw;                     // step to the next angle\n        }\n        // all done clean up.\n        if (!multiplyCurrentTransform) {\n            ctx.setTransform(1, 0, 0, 1, 0, 0); // restore the transform\n        }\n        ctx.textAlign = aligned;            // restore the text alignment\n    }\n    // define fill text\n    var fillCircleText = function (text, x, y, radius, start, end, forward) {\n        renderType = FILL;\n        circleText(this, text, x, y, radius, start, end, forward);\n    }\n    // define stroke text\n    var strokeCircleText = function (text, x, y, radius, start, end, forward) {\n        renderType = STROKE;\n        circleText(this, text, x, y, radius, start, end, forward);\n    }\n    // define measure text\n    var measureCircleTextExt = function (text, radius) {\n        return measure(this, text, radius);\n    }\n    // set the prototypes\n    CanvasRenderingContext2D.prototype.fillCircleText = fillCircleText;\n    CanvasRenderingContext2D.prototype.strokeCircleText = strokeCircleText;\n    CanvasRenderingContext2D.prototype.measureCircleText = measureCircleTextExt;\n})();","import {\n    saveAs\n} from 'file-saver';\n\nrequire('./text-to-arc.js');\n\nexport default class Wheel {\n\n    defaultConfig = {\n        radius: 200,\n        levels: 10,\n        fontSize: 15,\n        segments: [{\n                color: \"#97CC64\",\n                text: \"Section 1\",\n                level: 10\n            },\n            {\n                color: \"#4569BC\",\n                text: \"Section 2\",\n                level: 10\n            },\n            {\n                color: \"#A955B8\",\n                text: \"Section 3\",\n                level: 10\n            }\n        ]\n    };\n\n    constructor(canvas, config) {\n        if (!(canvas instanceof HTMLCanvasElement)) {\n            throw \"First argument should be of type HTMLCanvasElement\";\n        }\n\n        this.canvas = canvas;\n\n        if (config) {\n            this.config = config;\n\n            if (!this.config.fontSize) {\n                this.config.fontSize = this.defaultConfig.fontSize;\n            }\n\n            if (!this.config.radius) {\n                this.config.radius = this.defaultConfig.radius;\n            }\n\n            if (!this.config.levels) {\n                this.config.levels = this.defaultConfig.levels;\n            }\n        } else {\n            this.config = this.defaultConfig;\n        }\n\n        const width = canvas.width;\n        const height = canvas.height;\n\n        this.config.center = {\n            x: width / 2,\n            y: height / 2\n        };\n\n        const maxRadius = Math.min(width, height) / 2 - this.config.fontSize;\n        this.config.radius = Math.min(this.config.radius, maxRadius);\n\n        this.step = this.config.radius / this.config.levels;\n        this.degreesPerSegment = 360 / this.config.segments.length;\n        this.radiansPerSegment = this.degreesPerSegment / 180 * Math.PI;\n        this.data = this.config.segments.map(s => ({\n            level: s.level\n        }));\n\n        this.canvas.onmousedown = event => this.setLevel(canvas, event);\n    }\n\n    draw = function () {\n        const ctx = this.canvas.getContext('2d');\n\n        this.canvas.style.font = ctx.font;\n        this.canvas.style.fontSize = this.config.fontSize + \"px\";\n        ctx.font = this.canvas.style.font;\n        ctx.textBaseline = \"middle\";\n\n        this.drawSegments(ctx, this.config.center, this.config.segments, this.radiansPerSegment, this.step);\n        this.drawCircles(ctx, this.config.center, this.config.levels, this.step, this.config.segments.length);\n        this.drawTexts(ctx, this.config.center, this.config.segments, this.radiansPerSegment, this.config.radius, this.config.fontSize);\n    };\n\n    download = function () {\n        this.canvas.toBlob(function (blob) {\n            saveAs(blob, \"wheel-of-balance.jpg\");\n        }, \"image/jpeg\");\n    };\n\n    clear = function () {\n        this.data = this.config.segments.map(s => ({\n            level: s.level || this.config.levels\n        }));\n\n        this.redraw();\n    };\n\n    redraw() {\n        this.clean();\n        this.draw();\n    };\n\n    clean() {\n        const context = this.canvas.getContext('2d');\n\n        context.beginPath();\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.fillStyle = \"white\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.closePath();\n    };\n\n    drawSegments(ctx, center, segments, radiansPerSegment, step) {\n\n        for (var i = 0; i < segments.length; i++) {\n            const startAngle = i * radiansPerSegment;\n            const endAngle = startAngle + radiansPerSegment;\n\n            const segment = segments[i];\n            const dataItem = this.data[i];\n\n            this.drawSegment(ctx, center, step * dataItem.level, startAngle, endAngle, segment.color);\n        }\n    };\n\n    drawTexts(ctx, center, segments, radiansPerSegment, radius, fontSize) {\n        for (var i = 0; i < segments.length; i++) {\n\n            const segment = segments[i];\n\n            const startAngle = i * radiansPerSegment;\n            const endAngle = startAngle + radiansPerSegment;\n            let centerAngel = (startAngle + endAngle) / 2;\n\n            const textAngularWidth = ctx.measureCircleText(segment.text, radius).angularWidth;\n            if (centerAngel >= Math.PI) {\n                centerAngel -= textAngularWidth / 2;\n            } else {\n                centerAngel += textAngularWidth / 2;\n            }\n\n            ctx.beginPath();\n            ctx.moveTo(center.x, center.y);\n            ctx.fillStyle = segment.color;\n            ctx.fillCircleText(segment.text, center.x, center.y, radius + fontSize / 1.5, centerAngel);\n\n            ctx.fill();\n            ctx.closePath();\n        }\n    };\n\n    drawSegment(ctx, center, radius, startAngle, endAngle, color) {\n        ctx.beginPath();\n        ctx.moveTo(center.x, center.y);\n        ctx.arc(center.x, center.y, radius, startAngle, endAngle, false);\n        ctx.fillStyle = color;\n        ctx.fill();\n        ctx.closePath();\n    };\n\n    drawCircles(ctx, center, levels, step, segmentsCount) {\n\n        for (let i = 1; i <= segmentsCount; i++) {\n            const radians = i * (360 / segmentsCount) / 180 * Math.PI;\n            const endX = center.x + levels * step * Math.cos(radians);\n            const endY = center.y - levels * step * Math.sin(radians);\n\n            ctx.beginPath();\n            ctx.moveTo(center.x, center.y);\n            ctx.lineTo(endX, endY);\n            ctx.strokeStyle = \"#ffffff\";\n            ctx.lineWidth = 3;\n            ctx.stroke();\n            ctx.closePath();\n        }\n\n        let currentR = step;\n\n        for (let i = 0; i < levels; i++) {\n\n            ctx.beginPath();\n            ctx.arc(center.x, center.y, currentR, 0, 2 * Math.PI);\n            ctx.strokeStyle = \"#808080\";\n            ctx.lineWidth = 1;\n            ctx.stroke();\n            ctx.closePath();\n\n            currentR += step;\n        }\n    };\n\n    setLevel(canvas, e) {\n        const {\n            dx,\n            dy\n        } = this.calculateLineEnd(canvas, this.config.center, e);\n\n        const degrees = this.calculateLineAngel(dx, dy);\n        const segmentId = Math.floor(degrees / this.degreesPerSegment);\n        let dataItem = this.data[segmentId];\n\n        const pointRadius = Math.sqrt(dx * dx + dy * dy);\n        const length = Math.min(pointRadius, this.config.radius);\n        dataItem.level = length / this.step;\n\n        this.redraw();\n    };\n\n    calculateLineEnd(canvas, center, e) {\n        const rect = canvas.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        return {\n            dx: x - center.x,\n            dy: y - center.y,\n        };\n    };\n\n    calculateLineAngel(dx, dy) {\n        let radians = Math.atan(dy / dx); // wrong, in [-1/2 pi, 1/2 pi]\n\n        if (1 / dx < 0) radians += Math.PI; // fixed, in [-1/2 pi, 3/2 pi]\n        if (1 / radians < 0) radians += 2 * Math.PI; // fixed, in [+0, 2 pi]\n\n        return radians * 180 / Math.PI;\n    };\n}\n\nwindow.Wheel = Wheel;"]}